---
- name: Provision an AWS EC2 Instance together with its Private network
  hosts: localhost
  #gather_facts: true
  #become_user: yes
  vars:
    vpc_cidr: "10.10.0.0/16"
    subnet_cidr: "10.10.0.0/24"
    region: "eu-west-1"

  tasks:

    - name: Create a VPC
      amazon.aws.ec2_vpc_net:
        name: MyVpc
        region: "{{ region }}"
        cidr_block: "{{ vpc_cidr }}"
        state: present
      register: vpc_result

    - name: Print vpc id
      debug:
        var: vpc_result.vpc.id


    - name: Create Internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
      register: igw_result

    - name: Print igw id
      debug:
        var: igw_result.gateway_id

    - name: Create a Subnet
      ec2_vpc_subnet:
        region: "{{ region }}"
        cidr: "{{ subnet_cidr }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
          Name: MySubnet
      register: subnet_result

    - name: Print Subnet ID
      debug:
        var: subnet_result.subnet.id

    - name: Create subnet Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_result.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: Public
        subnets:
          - "{{ subnet_result.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_result.gateway_id }}"
      register: route_table_result

    - name: Print Route Table Id
      debug:
        var: route_table_result.route_table.id
    
    - name: Get the latest Amazon Linux AMI ID for eu-west-1
      command: aws ec2 describe-images --region "{{ region }}" --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" --query 'Images | [0].ImageId' --output text
      register: ami_result

    - name: Print AMI ID
      debug:
        var: ami_result.stdout

    - name: Create a security group
      ec2_group:
        name: MySecurityGroup
        region: "{{ region }}"
        description: Allow ssh and http
        vpc_id: "{{vpc_result.vpc.id}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: security_group_result
    
    - name: Print security group id
      debug:
        var: security_group_result.group_id

    - name: Create a Key Pair to be used by the EC2 for ssh authentication
      amazon.aws.ec2_key:
        name: MyKeyPair
        region: "{{ region }}"
        file_name: ./MyKeyPair.pem
      register: aws_ec2_key_pair


    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        key_name: MyKeyPair
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ami_result.stdout}}"
        security_group: MySecurityGroup
        count: 1
        vpc_subnet_id: "{{subnet_result.subnet.id}}"
        wait: yes
        wait_timeout: 300
        network:
          assign_public_ip: true
        tags:
          Name: BenEC2Instance
      register: ec2_instance_result

    - name: Print ec2 Public IP
      debug:
        var: ec2_instance_result.instances[0].public_ip_address

    - name: Add new Instance to the Host Group
      add_host:
        name: "{{ ec2_instance_result.instances[0].public_ip_address }}"
        groups: apache_servers


    - name: Wait for SSH to Become available
      wait_for:
        host: "{{ ec2_instance_result.instances[0].public_ip_address }}"
        port: 22
        state: started
        timeout: 300

        
- name: Configure EC2 Instance Install Apache
  hosts:  apache_servers
  become: true
  remote_user: ec2-user
  #vars:
    #ansible_ssh_private_key_file: ./MyKeyPair.pem

  tasks:
    - name: Update package cache
      yum:
        name: '*'
        state: latest

    - name: Install Apache
      yum:
        name: httpd
        state: present

    - name: Start Apache service
      service:
        name: httpd
        state: started
        enabled: yes